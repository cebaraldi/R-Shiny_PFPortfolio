# Two file apps: server.R

if (!require("shiny"))
  install.packages('shiny')
if (!require("DT"))
  install.packages('DT')
if (!require("httr"))
  install.packages('httr')
if (!require("XML"))
  install.packages('XML')
if (!require("Quandl"))
  install.packages('Quandl')

# Immediately enter the browser when an error occurs
#options(error = browser)

API <- "hDUA4xzpnCvZwFygscUf"
Quandl.auth(API)

params <- list(
  query = "*",
  source_code = "FSE",
  per_page = 300,
  page = 1,
  auth_token = API
)
page <- GET("https://www.quandl.com/",
            path = "api/v2/datasets.xml",
            query = params)

# XML type data
doc <- xmlTreeParse(page)
r <- xmlRoot(doc)
nodes <- r[["docs"]] # FSE had 160 indices on 06/08/2015 (in Quandl)
id <-
  as.integer(sapply(getNodeSet(nodes,"//id[@type='integer']"),xmlValue))
code <- sapply(getNodeSet(nodes,"//code"),xmlValue)
name <- sapply(getNodeSet(nodes,"//name"),xmlValue)
freq <- unlist(sapply(getNodeSet(nodes,"//frequency"),xmlValue))
from <- unlist(sapply(getNodeSet(nodes,"//from-date"),xmlValue))
to <- unlist(sapply(getNodeSet(nodes,"//to-date"),xmlValue))
#sx <- sapply(getNodeSet(r[["sources"]],"//name"),xmlValue) # NAME OF THE STOCK EXCHANGE
sorted <- order(code)
METADATA <-
  data.frame(code[sorted],name[sorted],freq[sorted],from[sorted],to[sorted],id[sorted])
names(METADATA) <- c("Code","Frequency","Name","From","To","ID")
rm(page,doc,r,nodes)#,id,code,name,freq,from,to,sx,sorted)

shinyServer(function(input, output) {
  output$downloadData <- downloadHandler(
    filename = function() {
      paste("METADATA-",Sys.Date(), '.csv', sep = '')
    },
    content = function(file) {
      write.csv(METADATA, file)
    }
  )
  
  
  output$fse <- renderText({
    "Frankfurt Stock Exchange"
  })
  #output$table <- DT::renderDataTable(METADATA,server=T,rownames=FALSE) does not work!
  output$table <- DT::renderDataTable(METADATA,server = T)
  output$contents <- renderTable({
    inFile <- input$file1
    if (is.null(inFile))
      return(NULL)
    dataset <<-
      read.csv(
        inFile$datapath, header = input$header, sep = input$sep,
        quote = input$quote, stringsAsFactors = FALSE
      )
    dataset
  })
  observeEvent(input$getData,{
    fsecol <- "Close"
    for (c in dataset$code) {
      code <- paste(paste("FSE",c,sep = "/"),"X",sep = "_")
      cat(code,"\n")
      if (!exists("FSE")) {
        FSE = Quandl(code,type = "zoo")[,fsecol,drop = F]
        attrname <- c
      } else {
        X = Quandl(code,type = "zoo")[,fsecol]
        FSE <- merge(FSE,X)
        attrname <- c(attrname, c)
      }
    }
    colnames(FSE) <- attrname
    
    # Select range of dates of interest (merge to keep class property)
    FSE <-
      merge(window(FSE,start = input$dates[1],end = input$dates[2]),drop = F)
    colnames(FSE) <- attrname
    
    # Compute returns
    FSE.ret <<- na.omit(diff(log(FSE)))[drop = F]
    print(head(FSE.ret))
  })
})